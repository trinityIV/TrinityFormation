<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trinity - Python Fondamentaux</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../../css/style.css">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="../../index.html">Trinity</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="../../index.html">Accueil</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle active" href="#" role="button" data-bs-toggle="dropdown">
                            Programming
                        </a>
                        <ul class="dropdown-menu">
                            <li><h6 class="dropdown-header">Python</h6></li>
                            <li><a class="dropdown-item active" href="python-basics.html">Bases Python</a></li>
                            <li><a class="dropdown-item" href="python-advanced.html">Python Avancé</a></li>
                            <li><div class="dropdown-divider"></div></li>
                            <li><h6 class="dropdown-header">C++</h6></li>
                            <li><a class="dropdown-item" href="cpp-fundamentals.html">Fondamentaux C++</a></li>
                            <li><a class="dropdown-item" href="cpp-advanced.html">C++ Avancé</a></li>
                            <li><div class="dropdown-divider"></div></li>
                            <li><h6 class="dropdown-header">Java</h6></li>
                            <li><a class="dropdown-item" href="java-basics.html">Bases Java</a></li>
                            <li><a class="dropdown-item" href="java-advanced.html">Java Avancé</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Background Canvas -->
    <canvas id="background-canvas"></canvas>

    <!-- Main Content -->
    <div class="container mt-5 pt-5">
        <h1 class="text-center mb-5">Cours : Fondamentaux Python</h1>

        <!-- Course Progress -->
        <div class="progress mb-4" style="height: 30px;">
            <div class="progress-bar bg-success" role="progressbar" style="width: 0%;" 
                 aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                0% Complété
            </div>
        </div>

        <!-- Introduction -->
        <section class="mb-5 content-section" id="introduction">
            <h2>Introduction à Python</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Premier Programme</h3>
                    <pre><code class="python">print("Hello, World!")

# Variables et types de base
name = "Python"
age = 30
price = 19.99
is_available = True

print(f"Langage: {name}, Age: {age} ans")</code></pre>

                    <h3>Installation et Configuration</h3>
                    <pre><code class="bash"># Installation de Python
python --version

# Création d'un environnement virtuel
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows</code></pre>
                </div>
            </div>
        </section>

        <!-- Data Structures -->
        <section class="mb-5 content-section" id="data-structures">
            <h2>Structures de Données</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Listes</h3>
                    <pre><code class="python"># Création et manipulation de listes
fruits = ["pomme", "banane", "orange"]
fruits.append("fraise")
fruits.remove("banane")

# Slicing
print(fruits[1:3])  # ['orange', 'fraise']

# List comprehension
squares = [x**2 for x in range(10)]</code></pre>

                    <h3>Dictionnaires</h3>
                    <pre><code class="python"># Création et utilisation de dictionnaires
user = {
    "name": "Alice",
    "age": 25,
    "skills": ["Python", "SQL", "Git"]
}

# Accès et modification
print(user["name"])
user["location"] = "Paris"

# Dict comprehension
square_dict = {x: x**2 for x in range(5)}</code></pre>

                    <h3>Tuples et Sets</h3>
                    <pre><code class="python"># Tuples (immutables)
coordinates = (10, 20)

# Sets (ensembles uniques)
unique_numbers = {1, 2, 3, 3, 4}  # {1, 2, 3, 4}
</code></pre>
                </div>
            </div>
        </section>

        <!-- Control Flow -->
        <section class="mb-5 content-section" id="control-flow">
            <h2>Structures de Contrôle</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Conditions</h3>
                    <pre><code class="python">age = 18

if age >= 18:
    print("Majeur")
elif age >= 13:
    print("Adolescent")
else:
    print("Enfant")

# Opérateur ternaire
status = "majeur" if age >= 18 else "mineur"</code></pre>

                    <h3>Boucles</h3>
                    <pre><code class="python"># Boucle for
for i in range(5):
    print(i)

# Boucle while
count = 0
while count < 5:
    print(count)
    count += 1

# Énumération
for index, value in enumerate(["a", "b", "c"]):
    print(f"{index}: {value}")</code></pre>
                </div>
            </div>
        </section>

        <!-- Functions -->
        <section class="mb-5 content-section" id="functions">
            <h2>Fonctions</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Définition et Arguments</h3>
                    <pre><code class="python"># Fonction basique
def greet(name):
    return f"Hello, {name}!"

# Arguments par défaut
def power(base, exponent=2):
    return base ** exponent

# Args et Kwargs
def print_info(*args, **kwargs):
    for arg in args:
        print(arg)
    for key, value in kwargs.items():
        print(f"{key}: {value}")</code></pre>

                    <h3>Lambda Functions</h3>
                    <pre><code class="python"># Fonctions lambda
square = lambda x: x**2
print(square(5))  # 25

# Avec map et filter
numbers = [1, 2, 3, 4, 5]
squares = list(map(lambda x: x**2, numbers))
evens = list(filter(lambda x: x % 2 == 0, numbers))</code></pre>
                </div>
            </div>
        </section>

        <!-- Classes -->
        <section class="mb-5 content-section" id="classes">
            <h2>Classes et Objets</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Définition de Classe</h3>
                    <pre><code class="python">class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def greet(self):
        return f"Hello, I'm {self.name}"
    
    @property
    def is_adult(self):
        return self.age >= 18

# Héritage
class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id</code></pre>

                    <h3>Méthodes Spéciales</h3>
                    <pre><code class="python">class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __str__(self):
        return f"Vector({self.x}, {self.y})"
    
    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)</code></pre>
                </div>
            </div>
        </section>

        <!-- Modules and Packages -->
        <section class="mb-5 content-section" id="modules">
            <h2>Modules et Packages</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Import et Utilisation</h3>
                    <pre><code class="python"># Import de modules
import math
from datetime import datetime
import json as js

# Modules standards utiles
import os
import sys
import random
import requests  # externe</code></pre>

                    <h3>Création de Module</h3>
                    <pre><code class="python"># mymodule.py
def hello():
    return "Hello from module!"

if __name__ == "__main__":
    print("Module exécuté directement")</code></pre>
                </div>
            </div>
        </section>

        <!-- File Handling -->
        <section class="mb-5 content-section" id="files">
            <h2>Gestion des Fichiers</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Lecture et Écriture</h3>
                    <pre><code class="python"># Lecture de fichier
with open("file.txt", "r") as f:
    content = f.read()
    lines = f.readlines()

# Écriture de fichier
with open("output.txt", "w") as f:
    f.write("Hello, World!")

# Gestion JSON
import json

data = {"name": "John", "age": 30}
json_str = json.dumps(data)
parsed = json.loads(json_str)</code></pre>
                </div>
            </div>
        </section>

        <!-- Exception Handling -->
        <section class="mb-5 content-section" id="exceptions">
            <h2>Gestion des Exceptions</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Try-Except</h3>
                    <pre><code class="python">try:
    num = int(input("Entrez un nombre: "))
    result = 10 / num
except ValueError:
    print("Entrée invalide")
except ZeroDivisionError:
    print("Division par zéro")
else:
    print(f"Résultat: {result}")
finally:
    print("Fin du programme")</code></pre>

                    <h3>Création d'Exception</h3>
                    <pre><code class="python">class CustomError(Exception):
    def __init__(self, message):
        self.message = message
        super().__init__(self.message)</code></pre>
                </div>
            </div>
        </section>

        <!-- Practical Exercise -->
        <section class="mb-5 content-section" id="exercise">
            <h2>Exercice Pratique</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Projet : Gestionnaire de Tâches</h3>
                    <p>Créez un gestionnaire de tâches avec les fonctionnalités suivantes :</p>
                    <ul>
                        <li>Ajouter/Supprimer des tâches</li>
                        <li>Marquer les tâches comme terminées</li>
                        <li>Sauvegarder dans un fichier JSON</li>
                        <li>Interface en ligne de commande</li>
                    </ul>

                    <div class="alert alert-info">
                        <strong>Conseil :</strong> Utilisez les classes, la gestion de fichiers, et les exceptions pour créer une application robuste.
                    </div>
                </div>
            </div>
        </section>
    </div>

    <footer class="text-center py-4">
        <p>Trinity Project © 2025 - Cours Python Fondamentaux</p>
    </footer>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../../js/main.js"></script>
    <script>
        // Gestion de la progression
        function updateProgress() {
            const sections = document.querySelectorAll('.content-section');
            const progressBar = document.querySelector('.progress-bar');
            const completed = Math.round((Array.from(sections).filter(section => 
                section.getBoundingClientRect().top < window.innerHeight/2).length / sections.length) * 100);
            progressBar.style.width = completed + '%';
            progressBar.textContent = completed + '% Complété';
            progressBar.setAttribute('aria-valuenow', completed);
        }

        // Mise à jour de la progression au scroll
        window.addEventListener('scroll', updateProgress);
        updateProgress();
    </script>
</body>
</html>
