<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trinity - Python Avancé</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../../css/style.css">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="../../index.html">Trinity</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="../../index.html">Accueil</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle active" href="#" role="button" data-bs-toggle="dropdown">
                            Programming
                        </a>
                        <ul class="dropdown-menu">
                            <li><h6 class="dropdown-header">Python</h6></li>
                            <li><a class="dropdown-item" href="python-basics.html">Bases Python</a></li>
                            <li><a class="dropdown-item active" href="python-advanced.html">Python Avancé</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Background Canvas -->
    <canvas id="background-canvas"></canvas>

    <!-- Main Content -->
    <div class="container mt-5 pt-5">
        <h1 class="text-center mb-5">Cours : Python Avancé</h1>

        <!-- Course Progress -->
        <div class="progress mb-4" style="height: 30px;">
            <div class="progress-bar bg-success" role="progressbar" style="width: 0%;" 
                 aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                0% Complété
            </div>
        </div>

        <!-- Decorators -->
        <section class="mb-5 content-section" id="decorators">
            <h2>Décorateurs</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Décorateurs de Base</h3>
                    <pre><code class="python">def timing_decorator(func):
    def wrapper(*args, **kwargs):
        import time
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f"{func.__name__} took {end-start} seconds")
        return result
    return wrapper

@timing_decorator
def slow_function():
    import time
    time.sleep(1)
    return "Done"</code></pre>

                    <h3>Décorateurs avec Arguments</h3>
                    <pre><code class="python">def retry(attempts=3, delay=1):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for i in range(attempts):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if i == attempts - 1:
                        raise e
                    time.sleep(delay)
            return None
        return wrapper
    return decorator

@retry(attempts=5, delay=2)
def unstable_network_call():
    # Code qui peut échouer
    pass</code></pre>
                </div>
            </div>
        </section>

        <!-- Metaclasses -->
        <section class="mb-5 content-section" id="metaclasses">
            <h2>Métaclasses</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Création de Métaclasse</h3>
                    <pre><code class="python">class SecurityMeta(type):
    def __new__(cls, name, bases, attrs):
        # Vérification des attributs sensibles
        for key, value in attrs.items():
            if key.startswith('_'):
                continue
            if isinstance(value, str) and 'password' in key.lower():
                attrs[key] = '******'
        return super().__new__(cls, name, bases, attrs)

class User(metaclass=SecurityMeta):
    def __init__(self, username, password):
        self.username = username
        self.password = password  # Sera masqué</code></pre>

                    <h3>Singleton avec Métaclasse</h3>
                    <pre><code class="python">class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super().__call__(*args, **kwargs)
        return cls._instances[cls]

class DatabaseConnection(metaclass=Singleton):
    def __init__(self):
        self.connected = False</code></pre>
                </div>
            </div>
        </section>

        <!-- Async Programming -->
        <section class="mb-5 content-section" id="async">
            <h2>Programmation Asynchrone</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Coroutines avec asyncio</h3>
                    <pre><code class="python">import asyncio
import aiohttp

async def fetch_url(session, url):
    async with session.get(url) as response:
        return await response.text()

async def main():
    urls = [
        'http://example.com',
        'http://example.org',
        'http://example.net'
    ]
    
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_url(session, url) for url in urls]
        results = await asyncio.gather(*tasks)
        return results

# Exécution
asyncio.run(main())</code></pre>

                    <h3>Context Managers Asynchrones</h3>
                    <pre><code class="python">class AsyncResource:
    async def __aenter__(self):
        await self.open()
        return self

    async def __aexit__(self, exc_type, exc, tb):
        await self.close()

    async def open(self):
        print("Opening resource")

    async def close(self):
        print("Closing resource")</code></pre>
                </div>
            </div>
        </section>

        <!-- Memory Management -->
        <section class="mb-5 content-section" id="memory">
            <h2>Gestion de la Mémoire</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Garbage Collection</h3>
                    <pre><code class="python">import gc
import weakref

# Forcer la collection
gc.collect()

# Références faibles
class Cache:
    def __init__(self):
        self._cache = weakref.WeakValueDictionary()
    
    def add(self, key, obj):
        self._cache[key] = obj
    
    def get(self, key):
        return self._cache.get(key)</code></pre>

                    <h3>Gestionnaire de Contexte</h3>
                    <pre><code class="python">class ResourceManager:
    def __init__(self):
        self.resource = None
    
    def __enter__(self):
        self.resource = open("file.txt", "w")
        return self.resource
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.resource:
            self.resource.close()</code></pre>
                </div>
            </div>
        </section>

        <!-- Network Programming -->
        <section class="mb-5 content-section" id="network">
            <h2>Programmation Réseau</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Serveur TCP</h3>
                    <pre><code class="python">import socket

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind(('localhost', 8888))
server.listen(5)

while True:
    client, addr = server.accept()
    data = client.recv(1024)
    client.send(b"Received: " + data)
    client.close()</code></pre>

                    <h3>Client HTTP Personnalisé</h3>
                    <pre><code class="python">import requests
from requests.auth import HTTPBasicAuth

class CustomHTTPClient:
    def __init__(self, base_url):
        self.base_url = base_url
        self.session = requests.Session()
    
    def get(self, endpoint, auth=None):
        url = f"{self.base_url}{endpoint}"
        if auth:
            return self.session.get(
                url, 
                auth=HTTPBasicAuth(*auth)
            )
        return self.session.get(url)</code></pre>
                </div>
            </div>
        </section>

        <!-- Security Tools -->
        <section class="mb-5 content-section" id="security">
            <h2>Outils de Sécurité</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Scanner de Ports</h3>
                    <pre><code class="python">import socket
import threading
from queue import Queue

def port_scan(target, port, open_ports):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))
        if result == 0:
            open_ports.put(port)
        sock.close()
    except:
        pass

def scan_target(target, ports):
    open_ports = Queue()
    threads = []
    
    for port in ports:
        thread = threading.Thread(
            target=port_scan,
            args=(target, port, open_ports)
        )
        threads.append(thread)
        thread.start()
    
    for thread in threads:
        thread.join()
    
    return list(open_ports.queue)</code></pre>

                    <h3>Analyseur de Paquets</h3>
                    <pre><code class="python">from scapy.all import *

def packet_callback(packet):
    if packet.haslayer(TCP):
        if packet.haslayer(Raw):
            print(f"Source: {packet[IP].src}")
            print(f"Destination: {packet[IP].dst}")
            print(f"Payload: {packet[Raw].load}")

# Capture en direct
sniff(
    filter="tcp",
    prn=packet_callback,
    store=0
)</code></pre>
                </div>
            </div>
        </section>

        <!-- Reverse Engineering -->
        <section class="mb-5 content-section" id="reverse">
            <h2>Reverse Engineering</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Désassembleur Simple</h3>
                    <pre><code class="python">import capstone

def disassemble_bytes(code_bytes, arch=capstone.CS_ARCH_X86):
    md = capstone.Cs(arch, capstone.CS_MODE_64)
    for i in md.disasm(code_bytes, 0x1000):
        print(f"0x{i.address:x}:\t{i.mnemonic}\t{i.op_str}")</code></pre>

                    <h3>Analyse de Binaire</h3>
                    <pre><code class="python">import pefile

def analyze_pe(filename):
    pe = pefile.PE(filename)
    
    print("Sections:")
    for section in pe.sections:
        print(f"\t{section.Name.decode().strip('\x00')}")
    
    print("\nImports:")
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        print(f"\t{entry.dll.decode()}")
        for imp in entry.imports:
            print(f"\t\t{imp.name.decode() if imp.name else ''}")</code></pre>
                </div>
            </div>
        </section>

        <!-- Advanced Data Structures -->
        <section class="mb-5 content-section" id="data-structures">
            <h2>Structures de Données Avancées</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Trie pour l'Analyse de Texte</h3>
                    <pre><code class="python">class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end = False

class Trie:
    def __init__(self):
        self.root = TrieNode()
    
    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end = True
    
    def search(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                return False
            node = node.children[char]
        return node.is_end</code></pre>

                    <h3>Graph pour l'Analyse de Réseau</h3>
                    <pre><code class="python">class NetworkGraph:
    def __init__(self):
        self.nodes = {}
        self.edges = {}
    
    def add_node(self, node_id, data=None):
        self.nodes[node_id] = data or {}
        if node_id not in self.edges:
            self.edges[node_id] = []
    
    def add_edge(self, from_node, to_node, weight=1):
        if from_node in self.nodes and to_node in self.nodes:
            self.edges[from_node].append((to_node, weight))
    
    def get_neighbors(self, node_id):
        return self.edges.get(node_id, [])</code></pre>
                </div>
            </div>
        </section>

        <!-- Practical Exercise -->
        <section class="mb-5 content-section" id="exercise">
            <h2>Exercice Pratique</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Projet : Framework d'Analyse de Malware</h3>
                    <p>Créez un framework d'analyse de malware avec les fonctionnalités suivantes :</p>
                    <ul>
                        <li>Analyse statique de fichiers PE</li>
                        <li>Désassemblage de sections de code</li>
                        <li>Détection de patterns malveillants</li>
                        <li>Analyse de trafic réseau</li>
                        <li>Rapport d'analyse détaillé</li>
                    </ul>

                    <div class="alert alert-info">
                        <strong>Conseil :</strong> Utilisez les concepts avancés vus dans le cours : métaclasses pour les plugins, async pour l'analyse réseau, et structures de données optimisées.
                    </div>

                    <div class="alert alert-warning">
                        <strong>Note :</strong> Ce projet doit être utilisé uniquement dans un environnement de test sécurisé et à des fins éducatives.
                    </div>
                </div>
            </div>
        </section>
    </div>

    <footer class="text-center py-4">
        <p>Trinity Project © 2025 - Cours Python Avancé</p>
    </footer>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../../js/main.js"></script>
    <script>
        // Gestion de la progression
        function updateProgress() {
            const sections = document.querySelectorAll('.content-section');
            const progressBar = document.querySelector('.progress-bar');
            const completed = Math.round((Array.from(sections).filter(section => 
                section.getBoundingClientRect().top < window.innerHeight/2).length / sections.length) * 100);
            progressBar.style.width = completed + '%';
            progressBar.textContent = completed + '% Complété';
            progressBar.setAttribute('aria-valuenow', completed);
        }

        // Mise à jour de la progression au scroll
        window.addEventListener('scroll', updateProgress);
        updateProgress();
    </script>
</body>
</html>
