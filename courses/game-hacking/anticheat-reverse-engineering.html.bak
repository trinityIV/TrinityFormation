<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trinity - Reverse Engineering des Anti-Cheats</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../../css/style.css">
</head>
<body class="dark-theme">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="../../index.html">Trinity</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="../../index.html">Accueil</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="../../pages/anticheat.html">Game Hacking</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Background Canvas -->
    <canvas id="matrixCanvas"></canvas>

    <!-- Main Content -->
    <div class="container mt-5 pt-5">
        <h1 class="text-center mb-5">Cours Avanc√© : Reverse Engineering des Anti-Cheats</h1>

        <!-- Course Progress -->
        <div class="progress mb-4" style="height: 30px;">
            <div class="progress-bar" role="progressbar" style="width: 0%;" 
                 aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                0% Compl√©t√©
            </div>
        </div>

        <!-- Prerequisites -->
        <section class="mb-5 content-section" id="prerequisites">
            <h2>Pr√©requis</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <h3>Connaissances Requises</h3>
                    <ul>
                        <li>Assembleur x86/x64 avanc√©</li>
                        <li>Windows Kernel & Driver Development</li>
                        <li>Reverse Engineering avanc√©</li>
                        <li>D√©bogage kernel-mode</li>
                    </ul>

                    <div class="alert alert-info">
                        <h4>üõ†Ô∏è Outils N√©cessaires</h4>
                        <ul>
                            <li>IDA Pro ou Ghidra</li>
                            <li>WinDbg (avec symboles)</li>
                            <li>x64dbg</li>
                            <li>Process Hacker</li>
                            <li>Driver Development Kit (DDK)</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>

        <!-- Anti-Cheat Architecture -->
        <section class="mb-5 content-section" id="architecture">
            <h2>Architecture des Anti-Cheats</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <h3>Composants Principaux</h3>
                    <ul>
                        <li>Driver Kernel-mode</li>
                        <li>Service User-mode</li>
                        <li>DLL inject√©e dans le jeu</li>
                        <li>Syst√®me de communication IPC</li>
                    </ul>

                    <div class="code-block">
                        <pre><code>// Structure typique de communication
typedef struct _AC_COMMAND {
    ULONG CommandId;
    ULONG DataSize;
    PVOID Data;
    ULONG Checksum;
} AC_COMMAND, *PAC_COMMAND;

// Handler kernel typique
NTSTATUS ACDispatchCommand(
    PAC_COMMAND Cmd
) {
    switch(Cmd->CommandId) {
        case CMD_SCAN_MEMORY:
            return ScanSystemMemory();
        case CMD_CHECK_INTEGRITY:
            return VerifyGameIntegrity();
    }
}</code></pre>
                    </div>
                </div>
            </div>
        </section>

        <!-- Protection Mechanisms -->
        <section class="mb-5 content-section" id="protection">
            <h2>M√©canismes de Protection</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <h3>D√©tection de Modifications</h3>
                    <div class="code-block">
                        <pre><code>// V√©rification d'int√©grit√© de la m√©moire
BOOL CheckMemoryIntegrity(HANDLE hProcess) {
    MEMORY_BASIC_INFORMATION mbi;
    for(LPVOID addr = 0; 
        VirtualQueryEx(hProcess, addr, &mbi, sizeof(mbi));
        addr = (LPVOID)((DWORD_PTR)addr + mbi.RegionSize)) {
        
        if(mbi.State == MEM_COMMIT &&
           (mbi.Type == MEM_PRIVATE || mbi.Type == MEM_MAPPED)) {
            // V√©rification des pages suspectes
            if(IsPageModified(hProcess, addr, mbi.RegionSize)) {
                return FALSE;
            }
        }
    }
    return TRUE;
}</code></pre>
                    </div>

                    <h3>Techniques Courantes</h3>
                    <ul>
                        <li>V√©rification de checksums</li>
                        <li>D√©tection de hooks</li>
                        <li>Scan de signatures</li>
                        <li>Monitoring des appels syst√®me</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Kernel Mode Analysis -->
        <section class="mb-5 content-section" id="kernel">
            <h2>Analyse Kernel-Mode</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <h3>Techniques d'Analyse</h3>
                    <div class="code-block">
                        <pre><code>// Configuration de WinDbg pour kernel debugging
bcdedit /debug on
bcdedit /dbgsettings serial baudrate:115200 debugport:1

// Analyse des callbacks syst√®me
!process 0 0 game.exe
dt nt!_EPROCESS @$process
dx @$process->ProcessLock</code></pre>
                    </div>

                    <h3>Points d'Int√©r√™t</h3>
                    <ul>
                        <li>System Service Descriptor Table (SSDT)</li>
                        <li>Kernel Callbacks</li>
                        <li>Object Callbacks</li>
                        <li>Mini-Filter Drivers</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Obfuscation Analysis -->
        <section class="mb-5 content-section" id="obfuscation">
            <h2>Analyse d'Obfuscation</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <h3>Techniques de D√©obfuscation</h3>
                    <div class="code-block">
                        <pre><code>// Script IDA pour d√©obfuscation
Python>def deobfuscate_jumps():
    for func in Functions():
        for head in Heads(func, FindFuncEnd(func)):
            if isJump(head):
                target = GetOperandValue(head, 0)
                if isJumpChain(target):
                    PatchByte(head, GetFinalTarget(target))

Python>deobfuscate_jumps()</code></pre>
                    </div>

                    <h3>Types d'Obfuscation</h3>
                    <ul>
                        <li>Control Flow Flattening</li>
                        <li>Instruction Virtualization</li>
                        <li>String Encryption</li>
                        <li>Anti-Debug Tricks</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Communication Analysis -->
        <section class="mb-5 content-section" id="communication">
            <h2>Analyse des Communications</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <h3>Protocoles Internes</h3>
                    <div class="code-block">
                        <pre><code>// Interception de communication IPC
void HookIPCCall() {
    BYTE original[15];
    memcpy(original, targetFunc, sizeof(original));
    
    DWORD oldProtect;
    VirtualProtect(targetFunc, sizeof(original),
        PAGE_EXECUTE_READWRITE, &oldProtect);
        
    // Installation du hook
    *(BYTE*)targetFunc = 0xE9;  // JMP
    *(DWORD*)((DWORD_PTR)targetFunc + 1) = 
        (DWORD_PTR)hookFunc - (DWORD_PTR)targetFunc - 5;
}</code></pre>
                    </div>

                    <h3>Points d'Interception</h3>
                    <ul>
                        <li>Device I/O Control</li>
                        <li>Shared Memory</li>
                        <li>Named Pipes</li>
                        <li>Registry Operations</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Bypass Techniques -->
        <section class="mb-5 content-section" id="bypass">
            <h2>Techniques de Contournement</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <div class="alert alert-warning">
                        <h4>‚ö†Ô∏è Usage √âthique</h4>
                        <p>Ces informations sont fournies uniquement √† des fins √©ducatives et de recherche.</p>
                    </div>

                    <h3>Approches Communes</h3>
                    <ul>
                        <li>Driver Loading Prevention</li>
                        <li>Hooking Prevention</li>
                        <li>Memory Scanning Evasion</li>
                        <li>Communication Interception</li>
                    </ul>

                    <div class="code-block">
                        <pre><code>// Exemple de protection contre le scanning
void ProtectMemoryRegion() {
    VirtualLock(targetMemory, size);  // Prevent paging
    // Implement custom page guard
    SetUnhandledExceptionFilter(CustomHandler);
}</code></pre>
                    </div>
                </div>
            </div>
        </section>

        <!-- Advanced Detection -->
        <section class="mb-5 content-section" id="detection">
            <h2>D√©tection Avanc√©e</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <h3>M√©thodes de D√©tection</h3>
                    <ul>
                        <li>Hypervisor-based Detection</li>
                        <li>Hardware Performance Counters</li>
                        <li>Timing Analysis</li>
                        <li>Memory Pattern Analysis</li>
                    </ul>

                    <div class="code-block">
                        <pre><code>// D√©tection de debugger via timing
BOOL IsDebuggerPresentAdvanced() {
    LARGE_INTEGER freq, start, end;
    QueryPerformanceFrequency(&freq);
    QueryPerformanceCounter(&start);
    
    __try {
        __debugbreak();
    } __except(EXCEPTION_EXECUTE_HANDLER) {}
    
    QueryPerformanceCounter(&end);
    double elapsed = (end.QuadPart - start.QuadPart) * 1000.0 / freq.QuadPart;
    return elapsed > 0.1; // Threshold in ms
}</code></pre>
                    </div>
                </div>
            </div>
        </section>

        <!-- Case Studies -->
        <section class="mb-5 content-section" id="case-studies">
            <h2>√âtudes de Cas</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <h3>Analyse d'Anti-Cheats Populaires</h3>
                    <ul>
                        <li>M√©canismes de protection</li>
                        <li>Points faibles communs</li>
                        <li>√âvolution des techniques</li>
                        <li>Contre-mesures efficaces</li>
                    </ul>

                    <div class="alert alert-info">
                        <h4>üí° Note</h4>
                        <p>Les exemples sont bas√©s sur des versions publiquement document√©es et des techniques connues.</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Practical Exercise -->
        <section class="mb-5 content-section" id="exercise">
            <h2>Exercice Pratique</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <h3>Analyse d'un Anti-Cheat Simple</h3>
                    <ol>
                        <li>Identifier les composants</li>
                        <li>Analyser les m√©canismes de protection</li>
                        <li>Documenter les techniques de d√©tection</li>
                        <li>Proposer des am√©liorations</li>
                    </ol>

                    <div class="alert alert-success">
                        <h4>üí° Conseil</h4>
                        <p>Commencez par une analyse statique avant de passer au d√©bogage dynamique.</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Common Pitfalls -->
        <section class="mb-5 content-section" id="pitfalls">
            <h2>Pi√®ges Courants</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <div class="alert alert-danger">
                        <h4>üö´ √Ä √âviter</h4>
                        <ul>
                            <li>Ignorer les protections kernel-mode</li>
                            <li>Sous-estimer l'obfuscation</li>
                            <li>N√©gliger les contre-mesures anti-debug</li>
                            <li>Oublier les v√©rifications d'int√©grit√©</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>

        <!-- Quiz -->
        <section class="mb-5 content-section" id="quiz">
            <h2>Quiz</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <div class="quiz-container">
                        <div class="question">
                            <p>1. Quelle est la meilleure approche pour analyser un driver anti-cheat ?</p>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="q1" value="a">
                                <label class="form-check-label">a) D√©bogage direct en user-mode</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="q1" value="b">
                                <label class="form-check-label">b) Analyse statique suivie de kernel debugging</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="q1" value="c">
                                <label class="form-check-label">c) Modification directe de la m√©moire</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Next Steps -->
        <section class="mb-5 content-section" id="next-steps">
            <h2>Prochaines √âtapes</h2>
            <div class="card dark-card">
                <div class="card-body">
                    <h3>Pour Aller Plus Loin</h3>
                    <ul>
                        <li>Cours suivant : D√©veloppement d'Anti-Cheat</li>
                        <li>Analyse de malware avanc√©e</li>
                        <li>Techniques de virtualisation</li>
                        <li>S√©curit√© des jeux en ligne</li>
                    </ul>
                </div>
            </div>
        </section>
    </div>

    <!-- Footer -->
    <footer class="text-center py-4">
        <p>Trinity Project ¬© 2025 - Cours Reverse Engineering Anti-Cheat</p>
    </footer>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../../js/main.js"></script>
    
    <!-- Course Progress Script -->
    <script>
        // Simple progress tracking
        let sections = document.querySelectorAll('.content-section');
        let progress = 0;
        
        sections.forEach(section => {
            section.addEventListener('click', () => {
                if (!section.classList.contains('completed')) {
                    section.classList.add('completed');
                    progress = Math.min(100, progress + (100 / sections.length));
                    updateProgress();
                }
            });
        });

        function updateProgress() {
            let progressBar = document.querySelector('.progress-bar');
            progressBar.style.width = progress + '%';
            progressBar.innerHTML = Math.round(progress) + '% Compl√©t√©';
        }
    </script>
</body>
</html>
