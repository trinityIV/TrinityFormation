<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trinity - IDA Pro Intermédiaire</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../../css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism-tomorrow.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body class="bg-dark text-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-black fixed-top">
        <div class="container">
            <a class="navbar-brand" href="../../index.html">Trinity</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="../../index.html">Accueil</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle active" href="#" role="button" data-bs-toggle="dropdown">
                            Game Hacking
                        </a>
                        <ul class="dropdown-menu dropdown-menu-dark">
                            <li><h6 class="dropdown-header">Fondamentaux</h6></li>
                            <li><a class="dropdown-item" href="cheat-engine-basics.html">Cheat Engine Basics</a></li>
                            <li><a class="dropdown-item" href="cheat-engine-pointers.html">Pointeurs & Structures</a></li>
                            <li><a class="dropdown-item" href="ida-pro-basics.html">IDA Pro Basics</a></li>
                            <li><div class="dropdown-divider"></div></li>
                            <li><h6 class="dropdown-header">Avancé</h6></li>
                            <li><a class="dropdown-item active" href="ida-pro-intermediate.html">IDA Pro Intermédiaire</a></li>
                            <li><a class="dropdown-item" href="signature-creation.html">Création de Signatures</a></li>
                            <li><a class="dropdown-item" href="network-protocol-analysis.html">Analyse de Protocoles</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <main class="container mt-5 pt-5">
        <!-- En-tête du cours -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card bg-dark border-primary">
                    <div class="card-body">
                        <h1 class="card-title text-primary">IDA Pro Intermédiaire</h1>
                        <div class="d-flex align-items-center mb-3">
                            <span class="badge bg-primary me-2">Niveau: Intermédiaire</span>
                            <span class="badge bg-info me-2">Durée: 5h</span>
                            <span class="badge bg-success">Game Hacking</span>
                        </div>
                        <p class="card-text">Approfondissez vos connaissances d'IDA Pro avec des techniques avancées d'analyse et de scripting.</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Barre de progression -->
        <div class="progress mb-4" style="height: 30px;">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%" id="courseProgress"></div>
        </div>

        <!-- Contenu du cours -->
        <div class="row">
            <!-- Table des matières -->
            <div class="col-md-3">
                <div class="card bg-dark border-secondary position-sticky" style="top: 100px;">
                    <div class="card-body">
                        <h5 class="card-title text-secondary">Table des matières</h5>
                        <nav id="toc" class="nav flex-column">
                            <a class="nav-link" href="#debugging">1. Débogage Avancé</a>
                            <a class="nav-link" href="#scripting">2. Scripting IDA</a>
                            <a class="nav-link" href="#plugins">3. Plugins & Extensions</a>
                            <a class="nav-link" href="#analysis">4. Techniques d'Analyse Avancées</a>
                            <a class="nav-link" href="#practice">5. Cas Pratiques</a>
                        </nav>
                    </div>
                </div>
            </div>

            <!-- Contenu principal -->
            <div class="col-md-9">
                <section id="debugging" class="mb-5">
                    <h2 class="text-primary">1. Débogage Avancé</h2>
                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Points d'Arrêt Conditionnels</h3>
                            <p>Les points d'arrêt conditionnels sont essentiels pour le débogage ciblé. Ils permettent d'interrompre l'exécution uniquement lorsque certaines conditions sont remplies.</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python">def condition_breakpoint():
    # Vérifie si EAX contient une valeur spécifique
    eax = get_reg_value("eax")
    return eax == 0x1234

# Définir un point d'arrêt conditionnel
add_bpt(0x401000, condition=condition_breakpoint)</code></pre>
                            </div>

                            <h3 class="mt-4">Surveillance de la Mémoire</h3>
                            <p>La surveillance de la mémoire permet de détecter les modifications de zones mémoire spécifiques :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python"># Surveiller les accès en écriture
add_memory_write_bp(0x401000, 4)  # Surveille 4 octets

# Surveiller les accès en lecture
add_memory_read_bp(0x402000, 8)   # Surveille 8 octets</code></pre>
                            </div>

                            <div class="alert alert-info mt-4">
                                <h5><i class="fas fa-lightbulb"></i> Conseil Pro</h5>
                                <p>Combinez les points d'arrêt conditionnels avec la surveillance mémoire pour un débogage plus précis et efficace.</p>
                            </div>
                        </div>
                    </div>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Analyse des Exceptions</h3>
                            <p>La gestion avancée des exceptions permet de comprendre le comportement des protections anti-debug :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python"># Configuration du gestionnaire d'exceptions
def exception_handler(exc_code, exc_addr):
    if exc_code == EXCEPTION_BREAKPOINT:
        print(f"Point d'arrêt à l'adresse: {hex(exc_addr)}")
        return EXCEPTION_CONTINUE_EXECUTION
    return EXCEPTION_CONTINUE_SEARCH

# Enregistrer le gestionnaire
set_exception_handler(exception_handler)</code></pre>
                            </div>

                            <div class="alert alert-warning mt-4">
                                <h5><i class="fas fa-exclamation-triangle"></i> Attention</h5>
                                <p>Certains malwares utilisent des exceptions comme mécanisme anti-debug. Soyez vigilant lors de l'analyse de tels comportements.</p>
                            </div>
                        </div>
                    </div>
                </section>

                <section id="scripting" class="mb-5">
                    <h2 class="text-primary">2. Scripting IDA (IDAPython)</h2>
                    
                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Fondamentaux IDAPython</h3>
                            <p>IDAPython combine la puissance de Python avec les capacités d'analyse d'IDA Pro. Voici les bases essentielles :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python"># Importation des modules essentiels
from idaapi import *
from idautils import *
from idc import *

# Obtenir des informations sur la fonction courante
ea = get_screen_ea()
func = get_func(ea)
func_name = get_func_name(ea)
print(f"Fonction actuelle : {func_name} à {hex(ea)}")</code></pre>
                            </div>

                            <div class="alert alert-info mt-4">
                                <h5><i class="fas fa-info-circle"></i> Note</h5>
                                <p>IDAPython est disponible dans la console Python intégrée d'IDA (Shift+F2) ou via des scripts externes.</p>
                            </div>
                        </div>
                    </div>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Analyse Automatisée</h3>
                            <p>Automatisez l'analyse des fonctions et des références :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python"># Parcourir toutes les fonctions
def analyse_fonctions():
    for func_ea in Functions():
        # Obtenir les références croisées
        for ref in XrefsTo(func_ea, 0):
            print(f"Référence à {hex(func_ea)} depuis {hex(ref.frm)}")
        
        # Analyser les instructions
        func = get_func(func_ea)
        if func:
            for ea in FuncItems(func_ea):
                instr = print_insn_mnem(ea)
                if instr == 'call':
                    print(f"Appel trouvé à {hex(ea)}")

# Recherche de motifs spécifiques
def trouve_motif():
    pattern = "48 8B 05 ? ? ? ?"  # REX.W mov rax, qword ptr [rip + ?]
    for ea in FindBinary(0, SEARCH_DOWN, pattern):
        print(f"Motif trouvé à {hex(ea)}")</code></pre>
                            </div>
                        </div>
                    </div>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Manipulation de la Base de Données</h3>
                            <p>Modifiez et enrichissez la base de données IDA :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python"># Ajouter des commentaires
def ajoute_commentaires():
    for func_ea in Functions():
        # Commentaire de fonction
        set_func_cmt(func_ea, "Fonction analysée automatiquement", 0)
        
        # Commentaires pour les appels API
        for ea in FuncItems(func_ea):
            if print_insn_mnem(ea) == 'call':
                api_name = get_name(get_operand_value(ea, 0))
                set_cmt(ea, f"Appel à {api_name}", 0)

# Renommer les fonctions intelligemment
def renomme_fonctions():
    for func_ea in Functions():
        # Analyse des chaînes référencées
        for ref in XrefsTo(func_ea, 0):
            s = get_strlit_contents(ref.frm)
            if s:
                new_name = f"handle_{s.decode('utf-8')}"
                set_name(func_ea, new_name)</code></pre>
                            </div>

                            <div class="alert alert-warning mt-4">
                                <h5><i class="fas fa-exclamation-triangle"></i> Attention</h5>
                                <p>Sauvegardez toujours votre base de données IDA avant d'exécuter des scripts qui la modifient.</p>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-success">
                        <h5><i class="fas fa-laptop-code"></i> Exercice Pratique</h5>
                        <p>Créez un script qui :</p>
                        <ol>
                            <li>Identifie toutes les fonctions qui manipulent des chaînes de caractères</li>
                            <li>Ajoute des commentaires descriptifs</li>
                            <li>Génère un rapport HTML des résultats</li>
                        </ol>
                    </div>
                </section>

                <section id="plugins" class="mb-5">
                    <h2 class="text-primary">3. Plugins & Extensions</h2>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Création de Plugins</h3>
                            <p>Apprenez à créer vos propres plugins IDA pour étendre ses fonctionnalités :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python"># Structure de base d'un plugin IDA
import ida_idaapi
import ida_kernwin

class MonPlugin(ida_idaapi.plugin_t):
    flags = ida_idaapi.PLUGIN_PROC
    wanted_name = "Mon Plugin d'Analyse"
    wanted_hotkey = "Alt-F7"
    comment = "Analyse personnalisée du binaire"
    help = "Ce plugin effectue une analyse personnalisée"
    
    def init(self):
        print("Plugin initialisé")
        return ida_idaapi.PLUGIN_OK
    
    def run(self, arg):
        print("Exécution du plugin")
        # Votre code d'analyse ici
        ida_kernwin.msg("Analyse terminée!\n")
    
    def term(self):
        print("Plugin terminé")

def PLUGIN_ENTRY():
    return MonPlugin()</code></pre>
                            </div>

                            <div class="alert alert-info mt-4">
                                <h5><i class="fas fa-info-circle"></i> Installation</h5>
                                <p>Placez votre plugin dans le dossier <code>plugins</code> d'IDA Pro pour qu'il soit chargé au démarrage.</p>
                            </div>
                        </div>
                    </div>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Interface Utilisateur</h3>
                            <p>Créez des interfaces graphiques pour vos plugins :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python">from PyQt5 import QtWidgets

class MonDialogue(QtWidgets.QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Analyseur Personnalisé")
        
        layout = QtWidgets.QVBoxLayout()
        
        # Ajout des widgets
        self.btn_analyse = QtWidgets.QPushButton("Lancer l'analyse")
        self.btn_analyse.clicked.connect(self.analyse)
        layout.addWidget(self.btn_analyse)
        
        self.progress = QtWidgets.QProgressBar()
        layout.addWidget(self.progress)
        
        self.setLayout(layout)
    
    def analyse(self):
        self.progress.setValue(0)
        # Code d'analyse ici
        self.progress.setValue(100)
        ida_kernwin.msg("Analyse terminée!\n")</code></pre>
                            </div>
                        </div>
                    </div>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Plugins Essentiels</h3>
                            <p>Découvrez et utilisez des plugins populaires pour l'analyse de malware et le game hacking :</p>
                            
                            <div class="table-responsive">
                                <table class="table table-dark table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Plugin</th>
                                            <th>Description</th>
                                            <th>Utilisation</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>FindCrypt</td>
                                            <td>Détection des constantes cryptographiques</td>
                                            <td>Analyse de protection et DRM</td>
                                        </tr>
                                        <tr>
                                            <td>Keypatch</td>
                                            <td>Modification d'instructions assembleur</td>
                                            <td>Patching de binaires</td>
                                        </tr>
                                        <tr>
                                            <td>HexRays Decompiler</td>
                                            <td>Décompilation en code C</td>
                                            <td>Analyse de code complexe</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>

                            <div class="alert alert-warning mt-4">
                                <h5><i class="fas fa-shield-alt"></i> Sécurité</h5>
                                <p>Vérifiez toujours la source et le code des plugins tiers avant de les installer. Certains plugins malveillants pourraient compromettre votre système.</p>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-success">
                        <h5><i class="fas fa-project-diagram"></i> Projet Pratique</h5>
                        <p>Créez un plugin qui :</p>
                        <ol>
                            <li>Analyse les fonctions d'un jeu pour détecter les routines de vérification anti-triche</li>
                            <li>Affiche les résultats dans une interface graphique personnalisée</li>
                            <li>Permet de patcher automatiquement certaines vérifications</li>
                        </ol>
                    </div>
                </section>

                <section id="analysis" class="mb-5">
                    <h2 class="text-primary">4. Techniques d'Analyse Avancées</h2>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Analyse des Structures de Données</h3>
                            <p>Techniques avancées pour identifier et analyser les structures de données des jeux :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-cpp">// Structure typique d'un personnage de jeu
struct Player {
    Vector3 position;    // 0x00
    float health;       // 0x0C
    float armor;        // 0x10
    char name[32];      // 0x14
    Weapon* weapons;    // 0x34
}; // Size: 0x38</code></pre>
                            </div>

                            <div class="example-code">
                                <pre><code class="language-python"># Script pour recréer la structure dans IDA
import ida_struct
import ida_bytes

def create_player_struct():
    sid = ida_struct.add_struc(0, "Player")
    if sid != -1:
        sptr = ida_struct.get_struc(sid)
        
        # Ajout des membres
        ida_struct.add_struc_member(sptr, "position", 0x00, ida_bytes.FF_FLOAT, None, 12)
        ida_struct.add_struc_member(sptr, "health", 0x0C, ida_bytes.FF_FLOAT, None, 4)
        ida_struct.add_struc_member(sptr, "armor", 0x10, ida_bytes.FF_FLOAT, None, 4)
        ida_struct.add_struc_member(sptr, "name", 0x14, ida_bytes.FF_STRLIT, None, 32)
        ida_struct.add_struc_member(sptr, "weapons", 0x34, ida_bytes.FF_QWORD, None, 8)</code></pre>
                            </div>
                        </div>
                    </div>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Analyse des Fonctions Virtuelles</h3>
                            <p>Techniques pour analyser les tables virtuelles (vtables) et les classes C++ :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python"># Analyse des vtables
def analyse_vtable(vtable_addr):
    vtable = []
    ptr_size = 8  # 64-bit
    
    # Parcourir la vtable
    current_addr = vtable_addr
    while ida_bytes.is_mapped(current_addr):
        func_ptr = ida_bytes.get_qword(current_addr)
        if not ida_bytes.is_mapped(func_ptr):
            break
            
        # Obtenir le nom de la fonction
        func_name = ida_name.get_name(func_ptr)
        vtable.append((func_ptr, func_name))
        current_addr += ptr_size
        
    return vtable

# Reconstruction de la hiérarchie des classes
def reconstruct_class_hierarchy(vtable_addr):
    class_name = ida_name.get_name(vtable_addr)
    print(f"Classe: {class_name}")
    
    # Analyser les fonctions virtuelles
    for func_addr, func_name in analyse_vtable(vtable_addr):
        print(f"  Méthode virtuelle: {func_name} @ {hex(func_addr)}")</code></pre>
                            </div>
                        </div>
                    </div>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Analyse des Protections</h3>
                            <p>Techniques pour identifier et analyser les mécanismes de protection :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python"># Détection des mécanismes anti-debug
def detect_anti_debug():
    suspicious_apis = [
        "IsDebuggerPresent",
        "CheckRemoteDebuggerPresent",
        "NtQueryInformationProcess",
        "GetTickCount",
        "QueryPerformanceCounter"
    ]
    
    for api in suspicious_apis:
        for xref in idautils.XrefsTo(ida_name.get_name_ea(0, api)):
            func = ida_funcs.get_func(xref.frm)
            if func:
                print(f"Possible anti-debug dans {ida_funcs.get_func_name(func.start_ea)}")
                
# Détection des protections de mémoire
def analyse_memory_protection():
    protection_apis = [
        "VirtualProtect",
        "VirtualAlloc",
        "WriteProcessMemory"
    ]
    
    for api in protection_apis:
        for xref in idautils.XrefsTo(ida_name.get_name_ea(0, api)):
            print(f"Protection mémoire à {hex(xref.frm)}")</code></pre>
                            </div>

                            <div class="alert alert-warning mt-4">
                                <h5><i class="fas fa-shield-alt"></i> Note de Sécurité</h5>
                                <p>Les techniques présentées ici sont à des fins éducatives. Respectez toujours les conditions d'utilisation des jeux et les lois en vigueur.</p>
                            </div>
                        </div>
                    </div>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Techniques de Déobfuscation</h3>
                            <p>Méthodes pour analyser et simplifier le code obfusqué :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-python"># Simplification des expressions arithmétiques
def simplify_arithmetic(ea):
    # Obtenir l'instruction
    insn = ida_ua.insn_t()
    ida_ua.decode_insn(insn, ea)
    
    if insn.Op1.type == ida_ua.o_reg and insn.Op2.type == ida_ua.o_imm:
        # Simplifier les opérations comme : xor eax, eax => mov eax, 0
        if insn.itype == ida_ua.NN_xor and insn.Op1.reg == insn.Op2.reg:
            # Patcher en mov reg, 0
            patch_instruction(ea, f"mov {get_reg_name(insn.Op1.reg)}, 0")

# Détection des chaînes encodées
def find_encoded_strings():
    for seg in idautils.Segments():
        for ea in idautils.Functions(seg, idc.get_segm_end(seg)):
            # Chercher les motifs d'encodage courants
            pattern = "48 B8 ?? ?? ?? ?? ?? ?? ?? ??"  # mov rax, immediate
            for found_ea in ida_bytes.find_binary(ea, ea + 100, pattern, 16, ida_bytes.SEARCH_DOWN):
                print(f"Possible chaîne encodée à {hex(found_ea)}")</code></pre>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-success">
                        <h5><i class="fas fa-graduation-cap"></i> Exercice Avancé</h5>
                        <p>Analysez un jeu protégé et :</p>
                        <ol>
                            <li>Identifiez les structures de données principales</li>
                            <li>Reconstruisez la hiérarchie des classes</li>
                            <li>Documentez les mécanismes de protection</li>
                            <li>Créez un script pour automatiser l'analyse</li>
                        </ol>
                    </div>
                </section>

                <section id="practice" class="mb-5">
                    <h2 class="text-primary">5. Cas Pratiques</h2>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Analyse d'un Système Anti-Triche</h3>
                            <p>Étude de cas : Analyse d'un système anti-triche simple dans un jeu :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-cpp">// Code original typique
class AntiCheat {
    bool isMemoryValid();
    bool isDebuggerPresent();
    bool validateChecksum();
    void reportViolation();
};</code></pre>
                            </div>

                            <div class="example-code">
                                <pre><code class="language-python"># Script d'analyse
def analyze_anticheat():
    # Recherche des fonctions suspectes
    suspicious_patterns = [
        "83 EC 20 E8 ?? ?? ?? ?? 84 C0",  # call isDebuggerPresent
        "FF 15 ?? ?? ?? ?? 85 C0",        # call external check
        "0F 85 ?? ?? ?? ?? E8"            # conditional jump to violation
    ]
    
    for pattern in suspicious_patterns:
        print(f"\nRecherche du motif: {pattern}")
        for ea in ida_bytes.find_binary(0, ida_ida.cvar.inf.max_ea, pattern, 16, ida_bytes.SEARCH_DOWN):
            func = ida_funcs.get_func(ea)
            if func:
                print(f"Trouvé dans {ida_funcs.get_func_name(func.start_ea)} @ {hex(ea)}")
                
    # Analyse des chaînes
    strings_to_find = [
        "cheat", "hack", "inject", "memory", "debug"
    ]
    
    for s in strings_to_find:
        for ea in idautils.Strings():
            if s in str(ea).lower():
                print(f"Chaîne suspecte '{str(ea)}' @ {hex(ea.ea)}")</code></pre>
                            </div>

                            <div class="alert alert-info mt-4">
                                <h5><i class="fas fa-lightbulb"></i> Astuce</h5>
                                <p>Les systèmes anti-triche modernes utilisent souvent des techniques d'obfuscation et de chiffrement. Cherchez les fonctions de déchiffrement pour identifier les vérifications importantes.</p>
                            </div>
                        </div>
                    </div>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Modification de la Logique de Jeu</h3>
                            <p>Exemple pratique de modification du comportement d'un jeu :</p>
                            
                            <div class="example-code">
                                <pre><code class="language-cpp">// Code original supposé
bool Player::takeDamage(float amount) {
    if (health <= 0) return false;
    health -= amount;
    if (health <= 0) {
        die();
        return true;
    }
    return true;
}</code></pre>
                            </div>

                            <div class="example-code">
                                <pre><code class="language-python"># Script pour patcher la fonction
def patch_damage_function(func_addr):
    # Trouver l'instruction de soustraction de vie
    pattern = "F3 0F 5C ?? ??"  # subss xmm0, [...]
    
    for ea in ida_bytes.find_binary(func_addr, func_addr + 100, pattern, 16, ida_bytes.SEARCH_DOWN):
        # Remplacer par une multiplication par 0
        patch_bytes(ea, "F3 0F 59 05 00 00 00 00")  # mulss xmm0, 0.0
        
        print(f"Patch appliqué @ {hex(ea)}")
        
# Script pour trouver les points d'entrée
def find_damage_function():
    damage_patterns = [
        "health",
        "damage",
        "hit",
        "hurt"
    ]
    
    for name in damage_patterns:
        for ea in idautils.Functions():
            func_name = ida_funcs.get_func_name(ea)
            if name.lower() in func_name.lower():
                print(f"Fonction potentielle: {func_name} @ {hex(ea)}")</code></pre>
                            </div>
                        </div>
                    </div>

                    <div class="card bg-dark border-secondary mb-4">
                        <div class="card-body">
                            <h3>Projet Final : Analyse Complète</h3>
                            <p>Réalisez une analyse complète d'un jeu en suivant ces étapes :</p>

                            <div class="accordion" id="analysisSteps">
                                <div class="accordion-item bg-dark">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button bg-dark text-light" type="button" data-bs-toggle="collapse" data-bs-target="#step1">
                                            1. Reconnaissance Initiale
                                        </button>
                                    </h2>
                                    <div id="step1" class="accordion-collapse collapse show">
                                        <div class="accordion-body">
                                            <ul>
                                                <li>Identifier les sections importantes du binaire</li>
                                                <li>Repérer les chaînes et ressources significatives</li>
                                                <li>Noter les imports et exports clés</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>

                                <div class="accordion-item bg-dark">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed bg-dark text-light" type="button" data-bs-toggle="collapse" data-bs-target="#step2">
                                            2. Analyse des Structures
                                        </button>
                                    </h2>
                                    <div id="step2" class="accordion-collapse collapse">
                                        <div class="accordion-body">
                                            <ul>
                                                <li>Identifier les classes principales</li>
                                                <li>Reconstruire les structures de données</li>
                                                <li>Documenter les relations entre objets</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>

                                <div class="accordion-item bg-dark">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed bg-dark text-light" type="button" data-bs-toggle="collapse" data-bs-target="#step3">
                                            3. Analyse Dynamique
                                        </button>
                                    </h2>
                                    <div id="step3" class="accordion-collapse collapse">
                                        <div class="accordion-body">
                                            <ul>
                                                <li>Placer des points d'arrêt stratégiques</li>
                                                <li>Suivre les flux de données importants</li>
                                                <li>Observer les interactions entre composants</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="alert alert-success mt-4">
                                <h5><i class="fas fa-tasks"></i> Livrables Attendus</h5>
                                <ol>
                                    <li>Documentation complète de l'architecture</li>
                                    <li>Scripts d'analyse automatisée</li>
                                    <li>Rapport sur les mécanismes de protection</li>
                                    <li>Recommandations de sécurité</li>
                                </ol>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-warning">
                        <h5><i class="fas fa-exclamation-triangle"></i> Rappel Éthique</h5>
                        <p>Ces techniques doivent être utilisées de manière éthique et légale, uniquement sur des systèmes pour lesquels vous avez l'autorisation explicite.</p>
                    </div>
                </section>

                <!-- Pied de page -->
                <footer class="text-center text-muted mt-5">
                    <p>Formation IDA Pro Intermédiaire - Trinity Learning Platform</p>
                </footer>
            </div>
        </div>
    </main>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js"></script>
    <script src="../../js/include-nav.js"></script>
    <script>
        function updateProgress() {
            const sections = document.querySelectorAll('section');
            const windowHeight = window.innerHeight;
            let totalSections = sections.length;
            let completedSections = 0;

            sections.forEach(section => {
                const rect = section.getBoundingClientRect();
                if (rect.top < windowHeight * 0.75) {
                    completedSections++;
                }
            });

            const progress = (completedSections / totalSections) * 100;
            document.getElementById('courseProgress').style.width = progress + '%';
        }

        window.addEventListener('scroll', updateProgress);
        updateProgress();
    </script>
</body>
</html>
