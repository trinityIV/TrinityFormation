<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trinity - Traçage des Cryptomonnaies</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../../css/style.css">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="../../index.html">Trinity</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="../../index.html">Accueil</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            Game Hacking
                        </a>
                        <ul class="dropdown-menu">
                            <li><h6 class="dropdown-header">Cheat Engine</h6></li>
                            <li><a class="dropdown-item" href="../game-hacking/cheat-engine-basics.html">Bases</a></li>
                            <li><a class="dropdown-item" href="../game-hacking/cheat-engine-pointers.html">Pointeurs & Structures</a></li>
                            <li><div class="dropdown-divider"></div></li>
                            <li><h6 class="dropdown-header">Analyse Statique</h6></li>
                            <li><a class="dropdown-item" href="../game-hacking/ida-pro-basics.html">IDA Pro Bases</a></li>
                            <li><a class="dropdown-item" href="../game-hacking/ida-pro-intermediate.html">IDA Pro Intermédiaire</a></li>
                            <li><a class="dropdown-item" href="../game-hacking/signature-creation.html">Création de Signatures</a></li>
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            OSINT
                        </a>
                        <ul class="dropdown-menu">
                            <li><h6 class="dropdown-header">Fondamentaux</h6></li>
                            <li><a class="dropdown-item" href="osint-tools-methodology.html">Outils & Méthodologie</a></li>
                            <li><a class="dropdown-item" href="dark-web-osint.html">Dark Web OSINT</a></li>
                            <li><div class="dropdown-divider"></div></li>
                            <li><h6 class="dropdown-header">Réseaux Sociaux</h6></li>
                            <li><a class="dropdown-item" href="social-media-basics.html">Social Media OSINT</a></li>
                            <li><div class="dropdown-divider"></div></li>
                            <li><h6 class="dropdown-header">Infrastructure Web</h6></li>
                            <li><a class="dropdown-item" href="domain-dns.html">Domain & DNS</a></li>
                            <li><a class="dropdown-item" href="email-recon.html">Email Reconnaissance</a></li>
                            <li><div class="dropdown-divider"></div></li>
                            <li><h6 class="dropdown-header">Données & Métadonnées</h6></li>
                            <li><a class="dropdown-item" href="image-metadata.html">Images & Métadonnées</a></li>
                            <li><a class="dropdown-item" href="cryptocurrency-tracing.html">Traçage Crypto</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Background Canvas -->
    <canvas id="background-canvas"></canvas>

    <!-- Main Content -->
    <div class="container mt-5 pt-5">
        <h1 class="text-center mb-5">Cours : Traçage des Cryptomonnaies</h1>

        <!-- Course Progress -->
        <div class="progress mb-4" style="height: 30px;">
            <div class="progress-bar bg-success" role="progressbar" style="width: 0%;" 
                 aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                0% Complété
            </div>
        </div>

        <!-- Introduction -->
        <section class="mb-5 content-section" id="introduction">
            <h2>Introduction</h2>
            <div class="card">
                <div class="card-body">
                    <div class="alert alert-warning">
                        <strong>Prérequis :</strong> 
                        <ul>
                            <li>Compréhension de base de la blockchain</li>
                            <li>Connaissances en cryptographie</li>
                            <li>Familiarité avec les APIs Web</li>
                        </ul>
                    </div>
                    
                    <h3>Objectifs du Cours</h3>
                    <ul class="list-unstyled">
                        <li>✓ Comprendre les techniques de traçage</li>
                        <li>✓ Utiliser les outils d'analyse blockchain</li>
                        <li>✓ Identifier les patterns de transaction</li>
                        <li>✓ Corréler les données on-chain/off-chain</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Blockchain Basics -->
        <section class="mb-5 content-section" id="blockchain">
            <h2>Fondamentaux Blockchain</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Structure des Transactions</h3>
                    <pre><code>class Transaction:
    def __init__(self):
        self.inputs = []    # UTXO précédents
        self.outputs = []   # Nouveaux UTXO
        self.timestamp = 0  # Horodatage
        self.fee = 0       # Frais mineurs
        
class UTXO:
    def __init__(self):
        self.value = 0     # Montant
        self.script = ""   # Script de verrouillage
        self.address = ""  # Adresse destinataire</code></pre>

                    <h3>Types d'Adresses</h3>
                    <ul>
                        <li>Legacy (1...)</li>
                        <li>SegWit (3...)</li>
                        <li>Native SegWit (bc1...)</li>
                        <li>Multi-signature</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Analysis Tools -->
        <section class="mb-5 content-section" id="tools">
            <h2>Outils d'Analyse</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Explorateurs de Blockchain</h3>
                    <ul>
                        <li>Blockchain.com</li>
                        <li>Blockchair</li>
                        <li>Etherscan</li>
                        <li>BscScan</li>
                    </ul>

                    <h3>API Integration</h3>
                    <pre><code>import requests

def analyze_address(address):
    # Configuration API
    API_KEY = 'your_api_key'
    base_url = 'https://api.etherscan.io/api'
    
    # Récupération des transactions
    params = {
        'module': 'account',
        'action': 'txlist',
        'address': address,
        'apikey': API_KEY
    }
    
    response = requests.get(base_url, params=params)
    return response.json()</code></pre>
                </div>
            </div>
        </section>

        <!-- Transaction Analysis -->
        <section class="mb-5 content-section" id="analysis">
            <h2>Analyse des Transactions</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Patterns de Transaction</h3>
                    <pre><code>def analyze_patterns(transactions):
    patterns = {
        'peeling': detect_peeling_chain,
        'mixing': detect_mixing_service,
        'layering': detect_layering,
        'clustering': cluster_addresses
    }
    
    results = {}
    for name, detector in patterns.items():
        results[name] = detector(transactions)
    
    return results</code></pre>

                    <h3>Indicateurs de Risque</h3>
                    <ul>
                        <li>Transactions fractionnées</li>
                        <li>Services de mixing</li>
                        <li>Adresses sanctionnées</li>
                        <li>Comportements suspects</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Clustering Techniques -->
        <section class="mb-5 content-section" id="clustering">
            <h2>Techniques de Clustering</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Heuristiques Communes</h3>
                    <pre><code>class AddressCluster:
    def __init__(self):
        self.addresses = set()
        self.transactions = []
        
    def add_address(self, address):
        # Heuristique du change
        if self.is_change_address(address):
            self.addresses.add(address)
            
    def is_change_address(self, address):
        # Analyse des patterns de change
        return (self.same_wallet_patterns(address) or
                self.round_amount_patterns(address))</code></pre>

                    <h3>Méthodes de Clustering</h3>
                    <ul>
                        <li>Co-spend Analysis</li>
                        <li>Change Address Detection</li>
                        <li>Behavioral Patterns</li>
                        <li>Temporal Analysis</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Graph Analysis -->
        <section class="mb-5 content-section" id="graph">
            <h2>Analyse de Graphes</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Visualisation</h3>
                    <pre><code>import networkx as nx
import matplotlib.pyplot as plt

def create_transaction_graph(transactions):
    G = nx.DiGraph()
    
    for tx in transactions:
        for input in tx.inputs:
            G.add_edge(input.address, 
                      tx.hash, 
                      value=input.value)
        
        for output in tx.outputs:
            G.add_edge(tx.hash, 
                      output.address,
                      value=output.value)
    
    return G</code></pre>

                    <h3>Métriques de Graphe</h3>
                    <ul>
                        <li>Centralité</li>
                        <li>Chemins les plus courts</li>
                        <li>Communautés</li>
                        <li>Flux de valeur</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Attribution -->
        <section class="mb-5 content-section" id="attribution">
            <h2>Attribution d'Identité</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Sources de Données</h3>
                    <ul>
                        <li>Exchanges KYC</li>
                        <li>Forums et réseaux sociaux</li>
                        <li>Bases de données de sanctions</li>
                        <li>Services d'attribution</li>
                    </ul>

                    <div class="alert alert-info">
                        <strong>Note :</strong> L'attribution doit toujours être basée sur des preuves multiples et vérifiables.
                    </div>

                    <h3>Techniques d'Attribution</h3>
                    <pre><code>def correlate_identity(address, data_sources):
    evidence = {
        'exchange_data': check_exchanges(address),
        'social_media': check_social_media(address),
        'sanctions': check_sanctions(address),
        'forum_posts': check_forums(address)
    }
    
    confidence_score = calculate_confidence(evidence)
    return evidence, confidence_score</code></pre>
                </div>
            </div>
        </section>

        <!-- Reporting -->
        <section class="mb-5 content-section" id="reporting">
            <h2>Rapports d'Investigation</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Structure du Rapport</h3>
                    <pre><code>rapport/
├── résumé_exécutif/
├── méthodologie/
├── analyse/
│   ├── transactions.md
│   ├── graphes/
│   └── attribution.md
├── preuves/
└── conclusions.md</code></pre>

                    <h3>Éléments Essentiels</h3>
                    <ul>
                        <li>Timeline des transactions</li>
                        <li>Visualisations de graphes</li>
                        <li>Preuves d'attribution</li>
                        <li>Indicateurs de confiance</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- Practical Exercise -->
        <section class="mb-5 content-section" id="exercise">
            <h2>Exercice Pratique</h2>
            <div class="card">
                <div class="card-body">
                    <h3>Projet : Analyse de Transaction</h3>
                    <ol>
                        <li>Sélectionner une transaction publique</li>
                        <li>Analyser le flux de fonds</li>
                        <li>Créer une visualisation</li>
                        <li>Identifier les patterns</li>
                        <li>Rédiger un rapport</li>
                    </ol>

                    <div class="alert alert-warning">
                        <strong>Important :</strong> N'utilisez que des données publiques et respectez la vie privée.
                    </div>
                </div>
            </div>
        </section>
    </div>

    <footer class="text-center py-4">
        <p>Trinity Project © 2025 - Cours Traçage des Cryptomonnaies</p>
    </footer>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../../js/main.js"></script>
    <script>
        // Gestion de la progression
        function updateProgress() {
            const sections = document.querySelectorAll('.content-section');
            const progressBar = document.querySelector('.progress-bar');
            const completed = Math.round((Array.from(sections).filter(section => 
                section.getBoundingClientRect().top < window.innerHeight/2).length / sections.length) * 100);
            progressBar.style.width = completed + '%';
            progressBar.textContent = completed + '% Complété';
            progressBar.setAttribute('aria-valuenow', completed);
        }

        // Mise à jour de la progression au scroll
        window.addEventListener('scroll', updateProgress);
        updateProgress();
    </script>
</body>
</html>
